name: build isl

on: 
  push: 
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    types: [opened, reopened]

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  build-native:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: osx-arm64, os: macos-14 }
          - { name: osx-x64, os: macos-latest }
          - { name: linux-x64, os: ubuntu-latest }
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up build environment (Windows, Visual Studio)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{matrix.config.arch}}
      if: runner.os == 'Windows'
    
    - name: Set up build environment (MacOs)
      run: |
        brew install readline
        brew install automake
        brew install autogen
        uname -m
      if: runner.os == 'macOS'

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
    
    - name: build and install isl
      run: |
        cd isl
        ./autogen.sh
        ./configure --prefix=`pwd`/install --with-clang=no --with-int=imath
        make install -j
      shell: bash

    - uses: actions/upload-artifact@v4
      with: 
        name: ${{ matrix.config.name }}
        path: ${{ github.workspace }}/isl/install
        if-no-files-found: error

  pack-and-publish:
    needs: build-native
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
      
    - name: Setup Mono
      run: sudo apt install mono-devel

    - name: Install NuGet CLI
      uses: nuget/setup-nuget@v2

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Update package versions
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        sed -i.bak "s/<version>0.0.1<\/version>/<version>$VERSION<\/version>/g" packages/libisl.linux-x64/libisl.linux-x64.nuspec
        sed -i.bak "s/<version>0.0.1<\/version>/<version>$VERSION<\/version>/g" packages/libisl.osx-x64/libisl.osx-x64.nuspec
        sed -i.bak "s/<version>0.0.1<\/version>/<version>$VERSION<\/version>/g" packages/libisl.osx-arm64/libisl.osx-arm64.nuspec

    - name: Pack NuGet Native packages
      run: |
        mkdir -p out/packages
        nuget pack packages/libisl.linux-x64 -BasePath $(pwd) -OutputDirectory $(pwd)/out/packages
        nuget pack packages/libisl.osx-x64 -BasePath $(pwd) -OutputDirectory $(pwd)/out/packages  
        nuget pack packages/libisl.osx-arm64 -BasePath $(pwd) -OutputDirectory $(pwd)/out/packages

    - name: Publish Native to NuGet
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        for pkg in out/packages/*.nupkg; do
          dotnet nuget push "$pkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done

    - name: Upload test packages
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      uses: actions/upload-artifact@v4
      with:
        name: test-packages
        path: out/packages/*.nupkg

    # - name: Build and pack main library
    #   run: |
    #     VERSION=${GITHUB_REF#refs/tags/v}
    #     dotnet pack ISLSharp/ISLSharp.csproj -c Release -p:PackageVersion=$VERSION -o out/packages

    # - name: Publish main library to NuGet
    #   run: |
    #     dotnet nuget push out/packages/ISLSharp.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
